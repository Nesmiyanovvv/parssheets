import jwt
import time
import requests
from cryptography.hazmat.primitives import serialization

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
SERVICE_ACCOUNT_ID = "ajehglr5qihbaeqol4bv"
KEY_ID = "ajel9aa2dlirk01i9ito"
PRIVATE_KEY = """-----BEGIN PRIVATE KEY-----
–ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
-----END PRIVATE KEY-----"""

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
_iam_token = None
_iam_token_expire = 0

def get_iam_token():
    global _iam_token, _iam_token_expire

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if _iam_token and time.time() < _iam_token_expire - 60:
        return _iam_token

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞
        serialization.load_pem_private_key(PRIVATE_KEY.encode(), password=None)
    except Exception as e:
        raise RuntimeError(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º: {e}")

    now = int(time.time())
    jwt_payload = {
        "aud": "https://iam.api.cloud.yandex.net/iam/v1/tokens",
        "iss": SERVICE_ACCOUNT_ID,
        "iat": now,
        "exp": now + 3600 * 12  # JWT –∂–∏–≤—ë—Ç 12 —á–∞—Å–æ–≤
    }

    encoded_jwt = jwt.encode(
        jwt_payload,
        PRIVATE_KEY,
        algorithm="PS256",
        headers={"kid": KEY_ID}
    )

    response = requests.post(
        "https://iam.api.cloud.yandex.net/iam/v1/tokens",
        json={"jwt": encoded_jwt},
        timeout=10
    )

    if response.status_code == 200:
        data = response.json()
        _iam_token = data["iamToken"]
        _iam_token_expire = now + 3600 * 12
        print("üîê –ù–æ–≤—ã–π IAM-—Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω.")
        return _iam_token
    else:
        raise RuntimeError(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IAM-—Ç–æ–∫–µ–Ω–∞: {response.status_code}, {response.text}")
